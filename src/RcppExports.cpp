// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// t_cpp
NumericMatrix t_cpp(NumericMatrix mat);
RcppExport SEXP _rPracticePkg_t_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(t_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// prod_cpp
NumericMatrix prod_cpp(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _rPracticePkg_prod_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(prod_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// t_prod_cpp
NumericMatrix t_prod_cpp(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _rPracticePkg_t_prod_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(t_prod_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rPracticePkg_t_cpp", (DL_FUNC) &_rPracticePkg_t_cpp, 1},
    {"_rPracticePkg_prod_cpp", (DL_FUNC) &_rPracticePkg_prod_cpp, 2},
    {"_rPracticePkg_t_prod_cpp", (DL_FUNC) &_rPracticePkg_t_prod_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rPracticePkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
